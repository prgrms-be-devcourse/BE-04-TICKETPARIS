plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com.programmers'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.1.3'

    implementation 'org.mindrot:jbcrypt:0.4'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2'
}

// 자바 빌드시 plain.jar 생성 안되게 설정
jar {
    enabled = false
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    reports {
        xml.required = true     // sonarqube 연동용
        html.required = true    // 로컬 확인용
        csv.required = false
    }

    // 결과 리포트에서 제외할 클래스
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/TicketparisApplication.class'
                    ])
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true

            // 커버리지 체크 단위
            // BUNDLE, CLASS, GROUP, METHOD, PACKAGE, SOURCEFILE
            element = 'BUNDLE'

            // 실패 기준
            limit {
                // 커버리지 측정 단위
                // LINE, BRANCH, CLASS, METHOD, INSTRUCTION, COMPLEXITY
                counter = 'LINE'

                // 측정결과 표현 방식
                // COVEREDCOUNT, COVEREDRATIO, MISSEDCOUNT, MISSEDRATIO, TOTALCOUNT
                value = 'COVEREDRATIO'
                minimum = 0.10
            }

            // ignore 클래스 지정
            excludes = [
                    '*.TicketparisApplication'
            ]
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    // 테스트 태스크마다 커버리지 검사 -> 빌드시에도 검사함
    finalizedBy jacocoTestReport
}
